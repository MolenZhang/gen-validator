package common

import (
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
)

type WalkHandler func(filename string) error

func WalkPathWithGoExt(path string, handler WalkHandler) {
	filepath.Walk(path, func(filename string, f os.FileInfo, _ error) error {
		if filepath.Ext(filename) != ".go" {
			return nil
		}
		if strings.Contains(filename, AutoGeneratedSuffix) {
			return nil
		}

		return handler(filename)
	})
}

type Column struct {
	Name string
	Type string
	Tag  string
}

type Struct struct {
	Name    string
	Columns []*Column
}

type Package struct {
	Name    string
	Structs []*Struct
}

func GetPackageFromFile(filename string) (*Package, error) {
	fset := token.NewFileSet()
	var src interface{}
	node, err := parser.ParseFile(fset, filename, src, 0)
	if err != nil {
		return nil, err
	}

	pkg := &Package{
		Name: node.Name.Name,
	}
	for _, f := range node.Decls {
		gen, ok := f.(*ast.GenDecl)
		if !ok {
			continue
		}
		if gen.Tok != token.TYPE {
			continue
		}

		for _, t := range gen.Specs {
			spec, ok := t.(*ast.TypeSpec)
			if !ok {
				continue
			}
			sct := &Struct{Name: spec.Name.Name}
			for _, field := range spec.Type.(*ast.StructType).Fields.List {
				column := &Column{
					Name: field.Names[0].Name,
				}
				if field.Tag != nil {
					column.Tag = field.Tag.Value
				}
				if t, ok := field.Type.(*ast.Ident); ok {
					// TODO 不能识别复杂如指针，数组+基本类型
					column.Type = t.Name
				} else if _, ok := field.Type.(*ast.ArrayType); ok {
					// TODO 数字现在只识别出是个数组而已
					column.Type = "array"
				}
				sct.Columns = append(sct.Columns, column)
			}
			pkg.Structs = append(pkg.Structs, sct)
		}
	}
	return pkg, nil
}
